<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="858" onload="init(evt)" viewBox="0 0 1200 858" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="858" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 939230 --output profile.svg --format flamegraph</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="847.00"> </text><svg id="frames" x="10" width="1180" total_samples="358507"><g><title>predict (ultralytics/engine/model.py:446) (404 samples, 0.11%)</title><rect x="0.0948%" y="148" width="0.1127%" height="15" fill="rgb(227,0,7)" fg:x="340" fg:w="404"/><text x="0.3448%" y="158.50"></text></g><g><title>setup_model (ultralytics/engine/predictor.py:303) (404 samples, 0.11%)</title><rect x="0.0948%" y="164" width="0.1127%" height="15" fill="rgb(217,0,24)" fg:x="340" fg:w="404"/><text x="0.3448%" y="174.50"></text></g><g><title>decorate_context (torch/utils/_contextlib.py:115) (404 samples, 0.11%)</title><rect x="0.0948%" y="180" width="0.1127%" height="15" fill="rgb(221,193,54)" fg:x="340" fg:w="404"/><text x="0.3448%" y="190.50"></text></g><g><title>stream_inference (ultralytics/engine/predictor.py:234) (364 samples, 0.10%)</title><rect x="0.2388%" y="196" width="0.1015%" height="15" fill="rgb(248,212,6)" fg:x="856" fg:w="364"/><text x="0.4888%" y="206.50"></text></g><g><title>warmup (ultralytics/nn/autobackend.py:631) (364 samples, 0.10%)</title><rect x="0.2388%" y="212" width="0.1015%" height="15" fill="rgb(208,68,35)" fg:x="856" fg:w="364"/><text x="0.4888%" y="222.50"></text></g><g><title>forward (ultralytics/nn/autobackend.py:455) (364 samples, 0.10%)</title><rect x="0.2388%" y="228" width="0.1015%" height="15" fill="rgb(232,128,0)" fg:x="856" fg:w="364"/><text x="0.4888%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (364 samples, 0.10%)</title><rect x="0.2388%" y="244" width="0.1015%" height="15" fill="rgb(207,160,47)" fg:x="856" fg:w="364"/><text x="0.4888%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (364 samples, 0.10%)</title><rect x="0.2388%" y="260" width="0.1015%" height="15" fill="rgb(228,23,34)" fg:x="856" fg:w="364"/><text x="0.4888%" y="270.50"></text></g><g><title>forward (ultralytics/nn/tasks.py:90) (364 samples, 0.10%)</title><rect x="0.2388%" y="276" width="0.1015%" height="15" fill="rgb(218,30,26)" fg:x="856" fg:w="364"/><text x="0.4888%" y="286.50"></text></g><g><title>predict (ultralytics/nn/tasks.py:108) (364 samples, 0.10%)</title><rect x="0.2388%" y="292" width="0.1015%" height="15" fill="rgb(220,122,19)" fg:x="856" fg:w="364"/><text x="0.4888%" y="302.50"></text></g><g><title>_predict_once (ultralytics/nn/tasks.py:129) (364 samples, 0.10%)</title><rect x="0.2388%" y="308" width="0.1015%" height="15" fill="rgb(250,228,42)" fg:x="856" fg:w="364"/><text x="0.4888%" y="318.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (363 samples, 0.10%)</title><rect x="0.2390%" y="324" width="0.1013%" height="15" fill="rgb(240,193,28)" fg:x="857" fg:w="363"/><text x="0.4890%" y="334.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (363 samples, 0.10%)</title><rect x="0.2390%" y="340" width="0.1013%" height="15" fill="rgb(216,20,37)" fg:x="857" fg:w="363"/><text x="0.4890%" y="350.50"></text></g><g><title>stream_inference (ultralytics/engine/predictor.py:253) (458 samples, 0.13%)</title><rect x="0.3456%" y="196" width="0.1278%" height="15" fill="rgb(206,188,39)" fg:x="1239" fg:w="458"/><text x="0.5956%" y="206.50"></text></g><g><title>__exit__ (ultralytics/utils/ops.py:51) (457 samples, 0.13%)</title><rect x="0.3459%" y="212" width="0.1275%" height="15" fill="rgb(217,207,13)" fg:x="1240" fg:w="457"/><text x="0.5959%" y="222.50"></text></g><g><title>time (ultralytics/utils/ops.py:61) (457 samples, 0.13%)</title><rect x="0.3459%" y="228" width="0.1275%" height="15" fill="rgb(231,73,38)" fg:x="1240" fg:w="457"/><text x="0.5959%" y="238.50"></text></g><g><title>synchronize (torch/cuda/__init__.py:792) (455 samples, 0.13%)</title><rect x="0.3464%" y="244" width="0.1269%" height="15" fill="rgb(225,20,46)" fg:x="1242" fg:w="455"/><text x="0.5964%" y="254.50"></text></g><g><title>_predict_once (ultralytics/nn/tasks.py:129) (1,426 samples, 0.40%)</title><rect x="0.4792%" y="340" width="0.3978%" height="15" fill="rgb(210,31,41)" fg:x="1718" fg:w="1426"/><text x="0.7292%" y="350.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,419 samples, 0.40%)</title><rect x="0.4812%" y="356" width="0.3958%" height="15" fill="rgb(221,200,47)" fg:x="1725" fg:w="1419"/><text x="0.7312%" y="366.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,402 samples, 0.39%)</title><rect x="0.4859%" y="372" width="0.3911%" height="15" fill="rgb(226,26,5)" fg:x="1742" fg:w="1402"/><text x="0.7359%" y="382.50"></text></g><g><title>forward (ultralytics/nn/autobackend.py:455) (1,441 samples, 0.40%)</title><rect x="0.4756%" y="260" width="0.4019%" height="15" fill="rgb(249,33,26)" fg:x="1705" fg:w="1441"/><text x="0.7256%" y="270.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,441 samples, 0.40%)</title><rect x="0.4756%" y="276" width="0.4019%" height="15" fill="rgb(235,183,28)" fg:x="1705" fg:w="1441"/><text x="0.7256%" y="286.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,439 samples, 0.40%)</title><rect x="0.4761%" y="292" width="0.4014%" height="15" fill="rgb(221,5,38)" fg:x="1707" fg:w="1439"/><text x="0.7261%" y="302.50"></text></g><g><title>forward (ultralytics/nn/tasks.py:90) (1,438 samples, 0.40%)</title><rect x="0.4764%" y="308" width="0.4011%" height="15" fill="rgb(247,18,42)" fg:x="1708" fg:w="1438"/><text x="0.7264%" y="318.50"></text></g><g><title>predict (ultralytics/nn/tasks.py:108) (1,438 samples, 0.40%)</title><rect x="0.4764%" y="324" width="0.4011%" height="15" fill="rgb(241,131,45)" fg:x="1708" fg:w="1438"/><text x="0.7264%" y="334.50"></text></g><g><title>stream_inference (ultralytics/engine/predictor.py:254) (1,452 samples, 0.41%)</title><rect x="0.4734%" y="196" width="0.4050%" height="15" fill="rgb(249,31,29)" fg:x="1697" fg:w="1452"/><text x="0.7234%" y="206.50"></text></g><g><title>inference (ultralytics/engine/predictor.py:142) (1,451 samples, 0.40%)</title><rect x="0.4736%" y="212" width="0.4047%" height="15" fill="rgb(225,111,53)" fg:x="1698" fg:w="1451"/><text x="0.7236%" y="222.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,450 samples, 0.40%)</title><rect x="0.4739%" y="228" width="0.4045%" height="15" fill="rgb(238,160,17)" fg:x="1699" fg:w="1450"/><text x="0.7239%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,444 samples, 0.40%)</title><rect x="0.4756%" y="244" width="0.4028%" height="15" fill="rgb(214,148,48)" fg:x="1705" fg:w="1444"/><text x="0.7256%" y="254.50"></text></g><g><title>non_max_suppression (ultralytics/utils/ops.py:239) (417 samples, 0.12%)</title><rect x="0.9291%" y="228" width="0.1163%" height="15" fill="rgb(232,36,49)" fg:x="3331" fg:w="417"/><text x="1.1791%" y="238.50"></text></g><g><title>non_max_suppression (ultralytics/utils/ops.py:261) (654 samples, 0.18%)</title><rect x="1.1392%" y="228" width="0.1824%" height="15" fill="rgb(209,103,24)" fg:x="4084" fg:w="654"/><text x="1.3892%" y="238.50"></text></g><g><title>non_max_suppression (ultralytics/utils/ops.py:282) (1,673 samples, 0.47%)</title><rect x="1.4075%" y="228" width="0.4667%" height="15" fill="rgb(229,88,8)" fg:x="5046" fg:w="1673"/><text x="1.6575%" y="238.50"></text></g><g><title>nms (torchvision/ops/boxes.py:41) (1,565 samples, 0.44%)</title><rect x="1.4376%" y="244" width="0.4365%" height="15" fill="rgb(213,181,19)" fg:x="5154" fg:w="1565"/><text x="1.6876%" y="254.50"></text></g><g><title>__call__ (torch/_ops.py:854) (1,537 samples, 0.43%)</title><rect x="1.4454%" y="260" width="0.4287%" height="15" fill="rgb(254,191,54)" fg:x="5182" fg:w="1537"/><text x="1.6954%" y="270.50"></text></g><g><title>postprocess (ultralytics/models/yolo/segment/predict.py:30) (3,571 samples, 1.00%)</title><rect x="0.9077%" y="212" width="0.9961%" height="15" fill="rgb(241,83,37)" fg:x="3254" fg:w="3571"/><text x="1.1577%" y="222.50"></text></g><g><title>postprocess (ultralytics/models/yolo/segment/predict.py:41) (3,128 samples, 0.87%)</title><rect x="1.9037%" y="212" width="0.8725%" height="15" fill="rgb(233,36,39)" fg:x="6825" fg:w="3128"/><text x="2.1537%" y="222.50"></text></g><g><title>convert_torch2numpy_batch (ultralytics/utils/ops.py:833) (3,128 samples, 0.87%)</title><rect x="1.9037%" y="228" width="0.8725%" height="15" fill="rgb(226,3,54)" fg:x="6825" fg:w="3128"/><text x="2.1537%" y="238.50"></text></g><g><title>process_mask (ultralytics/utils/ops.py:685) (1,441 samples, 0.40%)</title><rect x="2.8334%" y="228" width="0.4019%" height="15" fill="rgb(245,192,40)" fg:x="10158" fg:w="1441"/><text x="3.0834%" y="238.50"></text></g><g><title>process_mask (ultralytics/utils/ops.py:695) (970 samples, 0.27%)</title><rect x="3.4250%" y="228" width="0.2706%" height="15" fill="rgb(238,167,29)" fg:x="12279" fg:w="970"/><text x="3.6750%" y="238.50"></text></g><g><title>crop_mask (ultralytics/utils/ops.py:643) (525 samples, 0.15%)</title><rect x="3.5492%" y="244" width="0.1464%" height="15" fill="rgb(232,182,51)" fg:x="12724" fg:w="525"/><text x="3.7992%" y="254.50"></text></g><g><title>postprocess (ultralytics/models/yolo/segment/predict.py:54) (3,660 samples, 1.02%)</title><rect x="2.8011%" y="212" width="1.0209%" height="15" fill="rgb(231,60,39)" fg:x="10042" fg:w="3660"/><text x="3.0511%" y="222.50"></text></g><g><title>scale_boxes (ultralytics/utils/ops.py:123) (558 samples, 0.16%)</title><rect x="4.0169%" y="228" width="0.1556%" height="15" fill="rgb(208,69,12)" fg:x="14401" fg:w="558"/><text x="4.2669%" y="238.50"></text></g><g><title>postprocess (ultralytics/models/yolo/segment/predict.py:55) (1,258 samples, 0.35%)</title><rect x="3.8220%" y="212" width="0.3509%" height="15" fill="rgb(235,93,37)" fg:x="13702" fg:w="1258"/><text x="4.0720%" y="222.50"></text></g><g><title>stream_inference (ultralytics/engine/predictor.py:261) (11,942 samples, 3.33%)</title><rect x="0.8798%" y="196" width="3.3310%" height="15" fill="rgb(213,116,39)" fg:x="3154" fg:w="11942"/><text x="1.1298%" y="206.50">str..</text></g><g><title>_unique_impl (torch/functional.py:910) (502 samples, 0.14%)</title><rect x="4.3941%" y="308" width="0.1400%" height="15" fill="rgb(222,207,29)" fg:x="15753" fg:w="502"/><text x="4.6441%" y="318.50"></text></g><g><title>verbose (ultralytics/engine/results.py:327) (693 samples, 0.19%)</title><rect x="4.3411%" y="228" width="0.1933%" height="15" fill="rgb(206,96,30)" fg:x="15563" fg:w="693"/><text x="4.5911%" y="238.50"></text></g><g><title>unique (torch/_tensor.py:938) (562 samples, 0.16%)</title><rect x="4.3776%" y="244" width="0.1568%" height="15" fill="rgb(218,138,4)" fg:x="15694" fg:w="562"/><text x="4.6276%" y="254.50"></text></g><g><title>fn (torch/_jit_internal.py:497) (542 samples, 0.15%)</title><rect x="4.3832%" y="260" width="0.1512%" height="15" fill="rgb(250,191,14)" fg:x="15714" fg:w="542"/><text x="4.6332%" y="270.50"></text></g><g><title>fn (torch/_jit_internal.py:497) (527 samples, 0.15%)</title><rect x="4.3874%" y="276" width="0.1470%" height="15" fill="rgb(239,60,40)" fg:x="15729" fg:w="527"/><text x="4.6374%" y="286.50"></text></g><g><title>_return_output (torch/functional.py:996) (512 samples, 0.14%)</title><rect x="4.3915%" y="292" width="0.1428%" height="15" fill="rgb(206,27,48)" fg:x="15744" fg:w="512"/><text x="4.6415%" y="302.50"></text></g><g><title>verbose (ultralytics/engine/results.py:328) (423 samples, 0.12%)</title><rect x="4.5344%" y="228" width="0.1180%" height="15" fill="rgb(225,35,8)" fg:x="16256" fg:w="423"/><text x="4.7844%" y="238.50"></text></g><g><title>write_results (ultralytics/engine/predictor.py:334) (1,891 samples, 0.53%)</title><rect x="4.3087%" y="212" width="0.5275%" height="15" fill="rgb(250,213,24)" fg:x="15447" fg:w="1891"/><text x="4.5587%" y="222.50"></text></g><g><title>verbose (ultralytics/engine/results.py:329) (659 samples, 0.18%)</title><rect x="4.6523%" y="228" width="0.1838%" height="15" fill="rgb(247,123,22)" fg:x="16679" fg:w="659"/><text x="4.9023%" y="238.50"></text></g><g><title>stream_inference (ultralytics/engine/predictor.py:274) (2,227 samples, 0.62%)</title><rect x="4.2194%" y="196" width="0.6212%" height="15" fill="rgb(231,138,38)" fg:x="15127" fg:w="2227"/><text x="4.4694%" y="206.50"></text></g><g><title>generator_context (torch/utils/_contextlib.py:35) (16,625 samples, 4.64%)</title><rect x="0.2089%" y="180" width="4.6373%" height="15" fill="rgb(231,145,46)" fg:x="749" fg:w="16625"/><text x="0.4589%" y="190.50">gener..</text></g><g><title>predict_and_measure_time (Segmentation_Stage.py:49) (17,060 samples, 4.76%)</title><rect x="0.0940%" y="116" width="4.7586%" height="15" fill="rgb(251,118,11)" fg:x="337" fg:w="17060"/><text x="0.3440%" y="126.50">predic..</text></g><g><title>__call__ (ultralytics/engine/model.py:177) (17,060 samples, 4.76%)</title><rect x="0.0940%" y="132" width="4.7586%" height="15" fill="rgb(217,147,25)" fg:x="337" fg:w="17060"/><text x="0.3440%" y="142.50">__call..</text></g><g><title>predict (ultralytics/engine/model.py:453) (16,651 samples, 4.64%)</title><rect x="0.2081%" y="148" width="4.6445%" height="15" fill="rgb(247,81,37)" fg:x="746" fg:w="16651"/><text x="0.4581%" y="158.50">predi..</text></g><g><title>__call__ (ultralytics/engine/predictor.py:168) (16,650 samples, 4.64%)</title><rect x="0.2084%" y="164" width="4.6443%" height="15" fill="rgb(209,12,38)" fg:x="747" fg:w="16650"/><text x="0.4584%" y="174.50">__cal..</text></g><g><title>predict_and_measure_time (Segmentation_Stage.py:63) (505 samples, 0.14%)</title><rect x="4.8978%" y="116" width="0.1409%" height="15" fill="rgb(227,1,9)" fg:x="17559" fg:w="505"/><text x="5.1478%" y="126.50"></text></g><g><title>forward (torch/nn/modules/container.py:217) (1,417 samples, 0.40%)</title><rect x="5.2501%" y="260" width="0.3953%" height="15" fill="rgb(248,47,43)" fg:x="18822" fg:w="1417"/><text x="5.5001%" y="270.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,413 samples, 0.39%)</title><rect x="5.2512%" y="276" width="0.3941%" height="15" fill="rgb(221,10,30)" fg:x="18826" fg:w="1413"/><text x="5.5012%" y="286.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,404 samples, 0.39%)</title><rect x="5.2537%" y="292" width="0.3916%" height="15" fill="rgb(210,229,1)" fg:x="18835" fg:w="1404"/><text x="5.5037%" y="302.50"></text></g><g><title>forward (torchvision/models/_utils.py:69) (1,493 samples, 0.42%)</title><rect x="5.2359%" y="212" width="0.4164%" height="15" fill="rgb(222,148,37)" fg:x="18771" fg:w="1493"/><text x="5.4859%" y="222.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,490 samples, 0.42%)</title><rect x="5.2367%" y="228" width="0.4156%" height="15" fill="rgb(234,67,33)" fg:x="18774" fg:w="1490"/><text x="5.4867%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,485 samples, 0.41%)</title><rect x="5.2381%" y="244" width="0.4142%" height="15" fill="rgb(247,98,35)" fg:x="18779" fg:w="1485"/><text x="5.4881%" y="254.50"></text></g><g><title>forward (torchvision/models/segmentation/_utils.py:23) (1,495 samples, 0.42%)</title><rect x="5.2359%" y="164" width="0.4170%" height="15" fill="rgb(247,138,52)" fg:x="18771" fg:w="1495"/><text x="5.4859%" y="174.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,495 samples, 0.42%)</title><rect x="5.2359%" y="180" width="0.4170%" height="15" fill="rgb(213,79,30)" fg:x="18771" fg:w="1495"/><text x="5.4859%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,495 samples, 0.42%)</title><rect x="5.2359%" y="196" width="0.4170%" height="15" fill="rgb(246,177,23)" fg:x="18771" fg:w="1495"/><text x="5.4859%" y="206.50"></text></g><g><title>predict_and_measure_time (Segmentation_Stage.py:77) (1,625 samples, 0.45%)</title><rect x="5.2359%" y="116" width="0.4533%" height="15" fill="rgb(230,62,27)" fg:x="18771" fg:w="1625"/><text x="5.4859%" y="126.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,625 samples, 0.45%)</title><rect x="5.2359%" y="132" width="0.4533%" height="15" fill="rgb(216,154,8)" fg:x="18771" fg:w="1625"/><text x="5.4859%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,625 samples, 0.45%)</title><rect x="5.2359%" y="148" width="0.4533%" height="15" fill="rgb(244,35,45)" fg:x="18771" fg:w="1625"/><text x="5.4859%" y="158.50"></text></g><g><title>run (Segmentation_Stage.py:124) (20,088 samples, 5.60%)</title><rect x="0.0890%" y="84" width="5.6032%" height="15" fill="rgb(251,115,12)" fg:x="319" fg:w="20088"/><text x="0.3390%" y="94.50">run (Se..</text></g><g><title>decorate_context (torch/utils/_contextlib.py:115) (20,081 samples, 5.60%)</title><rect x="0.0909%" y="100" width="5.6013%" height="15" fill="rgb(240,54,50)" fg:x="326" fg:w="20081"/><text x="0.3409%" y="110.50">decorat..</text></g><g><title>visualize_result (Segmentation_Stage.py:83) (37,715 samples, 10.52%)</title><rect x="5.8214%" y="100" width="10.5200%" height="15" fill="rgb(233,84,52)" fg:x="20870" fg:w="37715"/><text x="6.0714%" y="110.50">visualize_resul..</text></g><g><title>visualize_result (Segmentation_Stage.py:84) (3,171 samples, 0.88%)</title><rect x="16.3414%" y="100" width="0.8845%" height="15" fill="rgb(207,117,47)" fg:x="58585" fg:w="3171"/><text x="16.5914%" y="110.50"></text></g><g><title>run (Segmentation_Stage.py:125) (57,608 samples, 16.07%)</title><rect x="5.6922%" y="84" width="16.0689%" height="15" fill="rgb(249,43,39)" fg:x="20407" fg:w="57608"/><text x="5.9422%" y="94.50">run (Segmentation_Stage.p..</text></g><g><title>visualize_result (Segmentation_Stage.py:85) (16,259 samples, 4.54%)</title><rect x="17.2259%" y="100" width="4.5352%" height="15" fill="rgb(209,38,44)" fg:x="61756" fg:w="16259"/><text x="17.4759%" y="110.50">visua..</text></g><g><title>run (Segmentation_Stage.py:127) (25,656 samples, 7.16%)</title><rect x="21.7725%" y="84" width="7.1563%" height="15" fill="rgb(236,212,23)" fg:x="78056" fg:w="25656"/><text x="22.0225%" y="94.50">run (Segme..</text></g><g><title>run (Segmentation_Stage.py:132) (76,294 samples, 21.28%)</title><rect x="28.9598%" y="84" width="21.2810%" height="15" fill="rgb(242,79,21)" fg:x="103823" fg:w="76294"/><text x="29.2098%" y="94.50">run (Segmentation_Stage.py:132)</text></g><g><title>ensemble (Segmentation_Stage.py:101) (3,039 samples, 0.85%)</title><rect x="50.3884%" y="100" width="0.8477%" height="15" fill="rgb(211,96,35)" fg:x="180646" fg:w="3039"/><text x="50.6384%" y="110.50"></text></g><g><title>ensemble (Segmentation_Stage.py:102) (3,177 samples, 0.89%)</title><rect x="51.2361%" y="100" width="0.8862%" height="15" fill="rgb(253,215,40)" fg:x="183685" fg:w="3177"/><text x="51.4861%" y="110.50"></text></g><g><title>ensemble (Segmentation_Stage.py:104) (24,230 samples, 6.76%)</title><rect x="52.1223%" y="100" width="6.7586%" height="15" fill="rgb(211,81,21)" fg:x="186862" fg:w="24230"/><text x="52.3723%" y="110.50">ensemble ..</text></g><g><title>ensemble (Segmentation_Stage.py:92) (15,371 samples, 4.29%)</title><rect x="58.8831%" y="100" width="4.2875%" height="15" fill="rgb(208,190,38)" fg:x="211100" fg:w="15371"/><text x="59.1331%" y="110.50">ensem..</text></g><g><title>ensemble (Segmentation_Stage.py:93) (15,891 samples, 4.43%)</title><rect x="63.1706%" y="100" width="4.4325%" height="15" fill="rgb(235,213,38)" fg:x="226471" fg:w="15891"/><text x="63.4206%" y="110.50">ensem..</text></g><g><title>&lt;module&gt; (main.py:47) (242,373 samples, 67.61%)</title><rect x="0.0000%" y="68" width="67.6062%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="242373"/><text x="0.2500%" y="78.50">&lt;module&gt; (main.py:47)</text></g><g><title>run (Segmentation_Stage.py:146) (61,909 samples, 17.27%)</title><rect x="50.3377%" y="84" width="17.2686%" height="15" fill="rgb(244,218,35)" fg:x="180464" fg:w="61909"/><text x="50.5877%" y="94.50">run (Segmentation_Stage.py:..</text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:606) (450 samples, 0.13%)</title><rect x="67.6891%" y="740" width="0.1255%" height="15" fill="rgb(240,68,47)" fg:x="242670" fg:w="450"/><text x="67.9391%" y="750.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (450 samples, 0.13%)</title><rect x="67.6891%" y="756" width="0.1255%" height="15" fill="rgb(210,16,53)" fg:x="242670" fg:w="450"/><text x="67.9391%" y="766.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (450 samples, 0.13%)</title><rect x="67.6891%" y="772" width="0.1255%" height="15" fill="rgb(235,124,12)" fg:x="242670" fg:w="450"/><text x="67.9391%" y="782.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (450 samples, 0.13%)</title><rect x="67.6891%" y="788" width="0.1255%" height="15" fill="rgb(224,169,11)" fg:x="242670" fg:w="450"/><text x="67.9391%" y="798.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (449 samples, 0.13%)</title><rect x="67.6893%" y="804" width="0.1252%" height="15" fill="rgb(250,166,2)" fg:x="242671" fg:w="449"/><text x="67.9393%" y="814.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (449 samples, 0.13%)</title><rect x="67.6893%" y="820" width="0.1252%" height="15" fill="rgb(242,216,29)" fg:x="242671" fg:w="449"/><text x="67.9393%" y="830.50"></text></g><g><title>&lt;module&gt; (seaborn/__init__.py:5) (526 samples, 0.15%)</title><rect x="67.6888%" y="452" width="0.1467%" height="15" fill="rgb(230,116,27)" fg:x="242669" fg:w="526"/><text x="67.9388%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (526 samples, 0.15%)</title><rect x="67.6888%" y="468" width="0.1467%" height="15" fill="rgb(228,99,48)" fg:x="242669" fg:w="526"/><text x="67.9388%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (526 samples, 0.15%)</title><rect x="67.6888%" y="484" width="0.1467%" height="15" fill="rgb(253,11,6)" fg:x="242669" fg:w="526"/><text x="67.9388%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (526 samples, 0.15%)</title><rect x="67.6888%" y="500" width="0.1467%" height="15" fill="rgb(247,143,39)" fg:x="242669" fg:w="526"/><text x="67.9388%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (526 samples, 0.15%)</title><rect x="67.6888%" y="516" width="0.1467%" height="15" fill="rgb(236,97,10)" fg:x="242669" fg:w="526"/><text x="67.9388%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (526 samples, 0.15%)</title><rect x="67.6888%" y="532" width="0.1467%" height="15" fill="rgb(233,208,19)" fg:x="242669" fg:w="526"/><text x="67.9388%" y="542.50"></text></g><g><title>&lt;module&gt; (seaborn/relational.py:21) (525 samples, 0.15%)</title><rect x="67.6891%" y="548" width="0.1464%" height="15" fill="rgb(216,164,2)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (525 samples, 0.15%)</title><rect x="67.6891%" y="564" width="0.1464%" height="15" fill="rgb(220,129,5)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (525 samples, 0.15%)</title><rect x="67.6891%" y="580" width="0.1464%" height="15" fill="rgb(242,17,10)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (525 samples, 0.15%)</title><rect x="67.6891%" y="596" width="0.1464%" height="15" fill="rgb(242,107,0)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (525 samples, 0.15%)</title><rect x="67.6891%" y="612" width="0.1464%" height="15" fill="rgb(251,28,31)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (525 samples, 0.15%)</title><rect x="67.6891%" y="628" width="0.1464%" height="15" fill="rgb(233,223,10)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="638.50"></text></g><g><title>&lt;module&gt; (seaborn/_statistics.py:32) (525 samples, 0.15%)</title><rect x="67.6891%" y="644" width="0.1464%" height="15" fill="rgb(215,21,27)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (525 samples, 0.15%)</title><rect x="67.6891%" y="660" width="0.1464%" height="15" fill="rgb(232,23,21)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (525 samples, 0.15%)</title><rect x="67.6891%" y="676" width="0.1464%" height="15" fill="rgb(244,5,23)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (525 samples, 0.15%)</title><rect x="67.6891%" y="692" width="0.1464%" height="15" fill="rgb(226,81,46)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (525 samples, 0.15%)</title><rect x="67.6891%" y="708" width="0.1464%" height="15" fill="rgb(247,70,30)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (525 samples, 0.15%)</title><rect x="67.6891%" y="724" width="0.1464%" height="15" fill="rgb(212,68,19)" fg:x="242670" fg:w="525"/><text x="67.9391%" y="734.50"></text></g><g><title>_create (hubconf.py:36) (543 samples, 0.15%)</title><rect x="67.6882%" y="164" width="0.1515%" height="15" fill="rgb(240,187,13)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (543 samples, 0.15%)</title><rect x="67.6882%" y="180" width="0.1515%" height="15" fill="rgb(223,113,26)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (543 samples, 0.15%)</title><rect x="67.6882%" y="196" width="0.1515%" height="15" fill="rgb(206,192,2)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (543 samples, 0.15%)</title><rect x="67.6882%" y="212" width="0.1515%" height="15" fill="rgb(241,108,4)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (543 samples, 0.15%)</title><rect x="67.6882%" y="228" width="0.1515%" height="15" fill="rgb(247,173,49)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (543 samples, 0.15%)</title><rect x="67.6882%" y="244" width="0.1515%" height="15" fill="rgb(224,114,35)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="254.50"></text></g><g><title>&lt;module&gt; (models/yolo.py:55) (543 samples, 0.15%)</title><rect x="67.6882%" y="260" width="0.1515%" height="15" fill="rgb(245,159,27)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (543 samples, 0.15%)</title><rect x="67.6882%" y="276" width="0.1515%" height="15" fill="rgb(245,172,44)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (543 samples, 0.15%)</title><rect x="67.6882%" y="292" width="0.1515%" height="15" fill="rgb(236,23,11)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (543 samples, 0.15%)</title><rect x="67.6882%" y="308" width="0.1515%" height="15" fill="rgb(205,117,38)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (543 samples, 0.15%)</title><rect x="67.6882%" y="324" width="0.1515%" height="15" fill="rgb(237,72,25)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (543 samples, 0.15%)</title><rect x="67.6882%" y="340" width="0.1515%" height="15" fill="rgb(244,70,9)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="350.50"></text></g><g><title>&lt;module&gt; (utils/plots.py:15) (543 samples, 0.15%)</title><rect x="67.6882%" y="356" width="0.1515%" height="15" fill="rgb(217,125,39)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (543 samples, 0.15%)</title><rect x="67.6882%" y="372" width="0.1515%" height="15" fill="rgb(235,36,10)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (543 samples, 0.15%)</title><rect x="67.6882%" y="388" width="0.1515%" height="15" fill="rgb(251,123,47)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (543 samples, 0.15%)</title><rect x="67.6882%" y="404" width="0.1515%" height="15" fill="rgb(221,13,13)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (543 samples, 0.15%)</title><rect x="67.6882%" y="420" width="0.1515%" height="15" fill="rgb(238,131,9)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (543 samples, 0.15%)</title><rect x="67.6882%" y="436" width="0.1515%" height="15" fill="rgb(211,50,8)" fg:x="242667" fg:w="543"/><text x="67.9382%" y="446.50"></text></g><g><title>fuse (models/yolo.py:192) (379 samples, 0.11%)</title><rect x="67.8492%" y="212" width="0.1057%" height="15" fill="rgb(245,182,24)" fg:x="243244" fg:w="379"/><text x="68.0992%" y="222.50"></text></g><g><title>attempt_load (models/experimental.py:107) (584 samples, 0.16%)</title><rect x="67.8483%" y="196" width="0.1629%" height="15" fill="rgb(242,14,37)" fg:x="243241" fg:w="584"/><text x="68.0983%" y="206.50"></text></g><g><title>&lt;module&gt; (main.py:50) (1,549 samples, 0.43%)</title><rect x="67.6062%" y="68" width="0.4321%" height="15" fill="rgb(246,228,12)" fg:x="242373" fg:w="1549"/><text x="67.8562%" y="78.50"></text></g><g><title>__init__ (Detection_Stage.py:12) (1,549 samples, 0.43%)</title><rect x="67.6062%" y="84" width="0.4321%" height="15" fill="rgb(213,55,15)" fg:x="242373" fg:w="1549"/><text x="67.8562%" y="94.50"></text></g><g><title>load_model (Detection_Stage.py:15) (1,549 samples, 0.43%)</title><rect x="67.6062%" y="100" width="0.4321%" height="15" fill="rgb(209,9,3)" fg:x="242373" fg:w="1549"/><text x="67.8562%" y="110.50"></text></g><g><title>load (torch/hub.py:568) (1,549 samples, 0.43%)</title><rect x="67.6062%" y="116" width="0.4321%" height="15" fill="rgb(230,59,30)" fg:x="242373" fg:w="1549"/><text x="67.8562%" y="126.50"></text></g><g><title>_load_local (torch/hub.py:597) (1,548 samples, 0.43%)</title><rect x="67.6065%" y="132" width="0.4318%" height="15" fill="rgb(209,121,21)" fg:x="242374" fg:w="1548"/><text x="67.8565%" y="142.50"></text></g><g><title>custom (hubconf.py:88) (1,548 samples, 0.43%)</title><rect x="67.6065%" y="148" width="0.4318%" height="15" fill="rgb(220,109,13)" fg:x="242374" fg:w="1548"/><text x="67.8565%" y="158.50"></text></g><g><title>_create (hubconf.py:50) (710 samples, 0.20%)</title><rect x="67.8402%" y="164" width="0.1980%" height="15" fill="rgb(232,18,1)" fg:x="243212" fg:w="710"/><text x="68.0902%" y="174.50"></text></g><g><title>__init__ (models/common.py:467) (681 samples, 0.19%)</title><rect x="67.8483%" y="180" width="0.1900%" height="15" fill="rgb(215,41,42)" fg:x="243241" fg:w="681"/><text x="68.0983%" y="190.50"></text></g><g><title>__str__ (tqdm/std.py:1151) (478 samples, 0.13%)</title><rect x="68.0731%" y="164" width="0.1333%" height="15" fill="rgb(224,123,36)" fg:x="244047" fg:w="478"/><text x="68.3231%" y="174.50"></text></g><g><title>display (tqdm/std.py:1495) (638 samples, 0.18%)</title><rect x="68.0720%" y="148" width="0.1780%" height="15" fill="rgb(240,125,3)" fg:x="244043" fg:w="638"/><text x="68.3220%" y="158.50"></text></g><g><title>refresh (tqdm/std.py:1347) (645 samples, 0.18%)</title><rect x="68.0704%" y="132" width="0.1799%" height="15" fill="rgb(205,98,50)" fg:x="244037" fg:w="645"/><text x="68.3204%" y="142.50"></text></g><g><title>update (tqdm/std.py:1242) (696 samples, 0.19%)</title><rect x="68.0609%" y="116" width="0.1941%" height="15" fill="rgb(205,185,37)" fg:x="244003" fg:w="696"/><text x="68.3109%" y="126.50"></text></g><g><title>__iter__ (tqdm/std.py:1191) (755 samples, 0.21%)</title><rect x="68.0500%" y="100" width="0.2106%" height="15" fill="rgb(238,207,15)" fg:x="243964" fg:w="755"/><text x="68.3000%" y="110.50"></text></g><g><title>run_inference (Detection_Stage.py:22) (785 samples, 0.22%)</title><rect x="68.0419%" y="84" width="0.2190%" height="15" fill="rgb(213,199,42)" fg:x="243935" fg:w="785"/><text x="68.2919%" y="94.50"></text></g><g><title>forward (models/common.py:851) (642 samples, 0.18%)</title><rect x="68.4310%" y="148" width="0.1791%" height="15" fill="rgb(235,201,11)" fg:x="245330" fg:w="642"/><text x="68.6810%" y="158.50"></text></g><g><title>tobytes (PIL/Image.py:768) (965 samples, 0.27%)</title><rect x="68.6854%" y="180" width="0.2692%" height="15" fill="rgb(207,46,11)" fg:x="246242" fg:w="965"/><text x="68.9354%" y="190.50"></text></g><g><title>__array_interface__ (PIL/Image.py:696) (1,432 samples, 0.40%)</title><rect x="68.6533%" y="164" width="0.3994%" height="15" fill="rgb(241,35,35)" fg:x="246127" fg:w="1432"/><text x="68.9033%" y="174.50"></text></g><g><title>load (PIL/ImageFile.py:271) (833 samples, 0.23%)</title><rect x="69.1945%" y="196" width="0.2324%" height="15" fill="rgb(243,32,47)" fg:x="248067" fg:w="833"/><text x="69.4445%" y="206.50"></text></g><g><title>load_read (PIL/PngImagePlugin.py:955) (366 samples, 0.10%)</title><rect x="69.3247%" y="212" width="0.1021%" height="15" fill="rgb(247,202,23)" fg:x="248534" fg:w="366"/><text x="69.5747%" y="222.50"></text></g><g><title>load (PIL/ImageFile.py:291) (21,722 samples, 6.06%)</title><rect x="69.4327%" y="196" width="6.0590%" height="15" fill="rgb(219,102,11)" fg:x="248921" fg:w="21722"/><text x="69.6827%" y="206.50">load (PI..</text></g><g><title>getexif (PIL/PngImagePlugin.py:1023) (23,192 samples, 6.47%)</title><rect x="69.0611%" y="180" width="6.4691%" height="15" fill="rgb(243,110,44)" fg:x="247589" fg:w="23192"/><text x="69.3111%" y="190.50">getexif ..</text></g><g><title>exif_transpose (utils/dataloaders.py:101) (23,253 samples, 6.49%)</title><rect x="69.0597%" y="164" width="6.4861%" height="15" fill="rgb(222,74,54)" fg:x="247584" fg:w="23253"/><text x="69.3097%" y="174.50">exif_tra..</text></g><g><title>forward (models/common.py:852) (24,893 samples, 6.94%)</title><rect x="68.6101%" y="148" width="6.9435%" height="15" fill="rgb(216,99,12)" fg:x="245972" fg:w="24893"/><text x="68.8601%" y="158.50">forward (..</text></g><g><title>letterbox (utils/augmentations.py:150) (430 samples, 0.12%)</title><rect x="75.7235%" y="180" width="0.1199%" height="15" fill="rgb(226,22,26)" fg:x="271474" fg:w="430"/><text x="75.9735%" y="190.50"></text></g><g><title>forward (models/common.py:865) (498 samples, 0.14%)</title><rect x="75.7048%" y="148" width="0.1389%" height="15" fill="rgb(217,163,10)" fg:x="271407" fg:w="498"/><text x="75.9548%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (models/common.py:865) (495 samples, 0.14%)</title><rect x="75.7056%" y="164" width="0.1381%" height="15" fill="rgb(213,25,53)" fg:x="271410" fg:w="495"/><text x="75.9556%" y="174.50"></text></g><g><title>forward (models/common.py:866) (4,656 samples, 1.30%)</title><rect x="75.8437%" y="148" width="1.2987%" height="15" fill="rgb(252,105,26)" fg:x="271905" fg:w="4656"/><text x="76.0937%" y="158.50"></text></g><g><title>forward (models/common.py:867) (1,282 samples, 0.36%)</title><rect x="77.1424%" y="148" width="0.3576%" height="15" fill="rgb(220,39,43)" fg:x="276561" fg:w="1282"/><text x="77.3924%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1535) (550 samples, 0.15%)</title><rect x="80.6238%" y="484" width="0.1534%" height="15" fill="rgb(229,68,48)" fg:x="289042" fg:w="550"/><text x="80.8738%" y="494.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1538) (372 samples, 0.10%)</title><rect x="80.7772%" y="484" width="0.1038%" height="15" fill="rgb(252,8,32)" fg:x="289592" fg:w="372"/><text x="81.0272%" y="494.50"></text></g><g><title>forward (torch/nn/modules/activation.py:396) (3,196 samples, 0.89%)</title><rect x="80.9343%" y="500" width="0.8915%" height="15" fill="rgb(223,20,43)" fg:x="290155" fg:w="3196"/><text x="81.1843%" y="510.50"></text></g><g><title>silu (torch/nn/functional.py:2101) (3,020 samples, 0.84%)</title><rect x="80.9834%" y="516" width="0.8424%" height="15" fill="rgb(229,81,49)" fg:x="290331" fg:w="3020"/><text x="81.2334%" y="526.50"></text></g><g><title>_conv_forward (torch/nn/modules/conv.py:456) (19,596 samples, 5.47%)</title><rect x="82.1125%" y="516" width="5.4660%" height="15" fill="rgb(236,28,36)" fg:x="294379" fg:w="19596"/><text x="82.3625%" y="526.50">_conv_f..</text></g><g><title>forward (torch/nn/modules/container.py:217) (31,757 samples, 8.86%)</title><rect x="78.7390%" y="356" width="8.8581%" height="15" fill="rgb(249,185,26)" fg:x="282285" fg:w="31757"/><text x="78.9890%" y="366.50">forward (torc..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (31,388 samples, 8.76%)</title><rect x="78.8420%" y="372" width="8.7552%" height="15" fill="rgb(249,174,33)" fg:x="282654" fg:w="31388"/><text x="79.0920%" y="382.50">_wrapped_cal..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (31,084 samples, 8.67%)</title><rect x="78.9268%" y="388" width="8.6704%" height="15" fill="rgb(233,201,37)" fg:x="282958" fg:w="31084"/><text x="79.1768%" y="398.50">_call_impl (..</text></g><g><title>forward (models/common.py:175) (31,041 samples, 8.66%)</title><rect x="78.9388%" y="404" width="8.6584%" height="15" fill="rgb(221,78,26)" fg:x="283001" fg:w="31041"/><text x="79.1888%" y="414.50">forward (mod..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (27,815 samples, 7.76%)</title><rect x="79.8386%" y="420" width="7.7586%" height="15" fill="rgb(250,127,30)" fg:x="286227" fg:w="27815"/><text x="80.0886%" y="430.50">_wrapped_ca..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (27,235 samples, 7.60%)</title><rect x="80.0004%" y="436" width="7.5968%" height="15" fill="rgb(230,49,44)" fg:x="286807" fg:w="27235"/><text x="80.2504%" y="446.50">_call_impl..</text></g><g><title>forward_fuse (models/common.py:90) (27,161 samples, 7.58%)</title><rect x="80.0210%" y="452" width="7.5761%" height="15" fill="rgb(229,67,23)" fg:x="286881" fg:w="27161"/><text x="80.2710%" y="462.50">forward_fu..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (25,379 samples, 7.08%)</title><rect x="80.5181%" y="468" width="7.0791%" height="15" fill="rgb(249,83,47)" fg:x="288663" fg:w="25379"/><text x="80.7681%" y="478.50">_wrapped_..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (24,049 samples, 6.71%)</title><rect x="80.8891%" y="484" width="6.7081%" height="15" fill="rgb(215,43,3)" fg:x="289993" fg:w="24049"/><text x="81.1391%" y="494.50">_call_imp..</text></g><g><title>forward (torch/nn/modules/conv.py:460) (20,678 samples, 5.77%)</title><rect x="81.8294%" y="500" width="5.7678%" height="15" fill="rgb(238,154,13)" fg:x="293364" fg:w="20678"/><text x="82.0794%" y="510.50">forward..</text></g><g><title>forward (torch/nn/modules/activation.py:396) (1,023 samples, 0.29%)</title><rect x="87.9285%" y="404" width="0.2854%" height="15" fill="rgb(219,56,2)" fg:x="315230" fg:w="1023"/><text x="88.1785%" y="414.50"></text></g><g><title>silu (torch/nn/functional.py:2101) (952 samples, 0.27%)</title><rect x="87.9484%" y="420" width="0.2655%" height="15" fill="rgb(233,0,4)" fg:x="315301" fg:w="952"/><text x="88.1984%" y="430.50"></text></g><g><title>_conv_forward (torch/nn/modules/conv.py:456) (6,294 samples, 1.76%)</title><rect x="88.3246%" y="420" width="1.7556%" height="15" fill="rgb(235,30,7)" fg:x="316650" fg:w="6294"/><text x="88.5746%" y="430.50"></text></g><g><title>forward (models/common.py:238) (43,685 samples, 12.19%)</title><rect x="77.9039%" y="308" width="12.1853%" height="15" fill="rgb(250,79,13)" fg:x="279291" fg:w="43685"/><text x="78.1539%" y="318.50">forward (models/co..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (41,257 samples, 11.51%)</title><rect x="78.5812%" y="324" width="11.5080%" height="15" fill="rgb(211,146,34)" fg:x="281719" fg:w="41257"/><text x="78.8312%" y="334.50">_wrapped_call_imp..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (40,946 samples, 11.42%)</title><rect x="78.6679%" y="340" width="11.4213%" height="15" fill="rgb(228,22,38)" fg:x="282030" fg:w="40946"/><text x="78.9179%" y="350.50">_call_impl (torch..</text></g><g><title>forward_fuse (models/common.py:90) (8,929 samples, 2.49%)</title><rect x="87.5986%" y="356" width="2.4906%" height="15" fill="rgb(235,168,5)" fg:x="314047" fg:w="8929"/><text x="87.8486%" y="366.50">fo..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (8,250 samples, 2.30%)</title><rect x="87.7880%" y="372" width="2.3012%" height="15" fill="rgb(221,155,16)" fg:x="314726" fg:w="8250"/><text x="88.0380%" y="382.50">_..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (7,821 samples, 2.18%)</title><rect x="87.9076%" y="388" width="2.1815%" height="15" fill="rgb(215,215,53)" fg:x="315155" fg:w="7821"/><text x="88.1576%" y="398.50">_..</text></g><g><title>forward (torch/nn/modules/conv.py:460) (6,722 samples, 1.87%)</title><rect x="88.2142%" y="404" width="1.8750%" height="15" fill="rgb(223,4,10)" fg:x="316254" fg:w="6722"/><text x="88.4642%" y="414.50">f..</text></g><g><title>forward (models/common.py:325) (633 samples, 0.18%)</title><rect x="90.3385%" y="308" width="0.1766%" height="15" fill="rgb(234,103,6)" fg:x="323870" fg:w="633"/><text x="90.5885%" y="318.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (457 samples, 0.13%)</title><rect x="90.3876%" y="324" width="0.1275%" height="15" fill="rgb(227,97,0)" fg:x="324046" fg:w="457"/><text x="90.6376%" y="334.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (439 samples, 0.12%)</title><rect x="90.3927%" y="340" width="0.1225%" height="15" fill="rgb(234,150,53)" fg:x="324064" fg:w="439"/><text x="90.6427%" y="350.50"></text></g><g><title>forward_fuse (models/common.py:90) (380 samples, 0.11%)</title><rect x="90.4091%" y="356" width="0.1060%" height="15" fill="rgb(228,201,54)" fg:x="324123" fg:w="380"/><text x="90.6591%" y="366.50"></text></g><g><title>forward (models/common.py:435) (495 samples, 0.14%)</title><rect x="90.5159%" y="308" width="0.1381%" height="15" fill="rgb(222,22,37)" fg:x="324506" fg:w="495"/><text x="90.7659%" y="318.50"></text></g><g><title>forward (models/yolo.py:109) (557 samples, 0.16%)</title><rect x="90.6903%" y="308" width="0.1554%" height="15" fill="rgb(237,53,32)" fg:x="325131" fg:w="557"/><text x="90.9403%" y="318.50"></text></g><g><title>forward (models/yolo.py:110) (877 samples, 0.24%)</title><rect x="90.8456%" y="308" width="0.2446%" height="15" fill="rgb(233,25,53)" fg:x="325688" fg:w="877"/><text x="91.0956%" y="318.50"></text></g><g><title>forward (models/yolo.py:111) (632 samples, 0.18%)</title><rect x="91.0903%" y="308" width="0.1763%" height="15" fill="rgb(210,40,34)" fg:x="326565" fg:w="632"/><text x="91.3403%" y="318.50"></text></g><g><title>forward (models/yolo.py:112) (679 samples, 0.19%)</title><rect x="91.2666%" y="308" width="0.1894%" height="15" fill="rgb(241,220,44)" fg:x="327197" fg:w="679"/><text x="91.5166%" y="318.50"></text></g><g><title>_conv_forward (torch/nn/modules/conv.py:456) (1,197 samples, 0.33%)</title><rect x="91.5924%" y="372" width="0.3339%" height="15" fill="rgb(235,28,35)" fg:x="328365" fg:w="1197"/><text x="91.8424%" y="382.50"></text></g><g><title>forward (models/yolo.py:95) (1,518 samples, 0.42%)</title><rect x="91.5067%" y="308" width="0.4234%" height="15" fill="rgb(210,56,17)" fg:x="328058" fg:w="1518"/><text x="91.7567%" y="318.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (1,361 samples, 0.38%)</title><rect x="91.5505%" y="324" width="0.3796%" height="15" fill="rgb(224,130,29)" fg:x="328215" fg:w="1361"/><text x="91.8005%" y="334.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (1,289 samples, 0.36%)</title><rect x="91.5706%" y="340" width="0.3595%" height="15" fill="rgb(235,212,8)" fg:x="328287" fg:w="1289"/><text x="91.8206%" y="350.50"></text></g><g><title>forward (torch/nn/modules/conv.py:460) (1,280 samples, 0.36%)</title><rect x="91.5731%" y="356" width="0.3570%" height="15" fill="rgb(223,33,50)" fg:x="328296" fg:w="1280"/><text x="91.8231%" y="366.50"></text></g><g><title>forward (models/yolo.py:97) (673 samples, 0.19%)</title><rect x="91.9413%" y="308" width="0.1877%" height="15" fill="rgb(219,149,13)" fg:x="329616" fg:w="673"/><text x="92.1913%" y="318.50"></text></g><g><title>forward (torch/nn/modules/activation.py:396) (461 samples, 0.13%)</title><rect x="92.3572%" y="356" width="0.1286%" height="15" fill="rgb(250,156,29)" fg:x="331107" fg:w="461"/><text x="92.6072%" y="366.50"></text></g><g><title>silu (torch/nn/functional.py:2101) (433 samples, 0.12%)</title><rect x="92.3650%" y="372" width="0.1208%" height="15" fill="rgb(216,193,19)" fg:x="331135" fg:w="433"/><text x="92.6150%" y="382.50"></text></g><g><title>_conv_forward (torch/nn/modules/conv.py:456) (3,750 samples, 1.05%)</title><rect x="92.5243%" y="372" width="1.0460%" height="15" fill="rgb(216,135,14)" fg:x="331706" fg:w="3750"/><text x="92.7743%" y="382.50"></text></g><g><title>_forward_once (models/yolo.py:167) (56,839 samples, 15.85%)</title><rect x="77.7181%" y="260" width="15.8544%" height="15" fill="rgb(241,47,5)" fg:x="278625" fg:w="56839"/><text x="77.9681%" y="270.50">_forward_once (models/yo..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (56,534 samples, 15.77%)</title><rect x="77.8032%" y="276" width="15.7693%" height="15" fill="rgb(233,42,35)" fg:x="278930" fg:w="56534"/><text x="78.0532%" y="286.50">_wrapped_call_impl (torc..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (56,282 samples, 15.70%)</title><rect x="77.8735%" y="292" width="15.6990%" height="15" fill="rgb(231,13,6)" fg:x="279182" fg:w="56282"/><text x="78.1235%" y="302.50">_call_impl (torch/nn/mod..</text></g><g><title>forward_fuse (models/common.py:90) (4,838 samples, 1.35%)</title><rect x="92.2230%" y="308" width="1.3495%" height="15" fill="rgb(207,181,40)" fg:x="330626" fg:w="4838"/><text x="92.4730%" y="318.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (4,588 samples, 1.28%)</title><rect x="92.2928%" y="324" width="1.2798%" height="15" fill="rgb(254,173,49)" fg:x="330876" fg:w="4588"/><text x="92.5428%" y="334.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (4,381 samples, 1.22%)</title><rect x="92.3505%" y="340" width="1.2220%" height="15" fill="rgb(221,1,38)" fg:x="331083" fg:w="4381"/><text x="92.6005%" y="350.50"></text></g><g><title>forward (torch/nn/modules/conv.py:460) (3,895 samples, 1.09%)</title><rect x="92.4861%" y="356" width="1.0865%" height="15" fill="rgb(206,124,46)" fg:x="331569" fg:w="3895"/><text x="92.7361%" y="366.50"></text></g><g><title>forward (models/common.py:666) (57,469 samples, 16.03%)</title><rect x="77.6016%" y="196" width="16.0301%" height="15" fill="rgb(249,21,11)" fg:x="278207" fg:w="57469"/><text x="77.8516%" y="206.50">forward (models/common.py..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (57,452 samples, 16.03%)</title><rect x="77.6063%" y="212" width="16.0253%" height="15" fill="rgb(222,201,40)" fg:x="278224" fg:w="57452"/><text x="77.8563%" y="222.50">_wrapped_call_impl (torch..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (57,434 samples, 16.02%)</title><rect x="77.6113%" y="228" width="16.0203%" height="15" fill="rgb(235,61,29)" fg:x="278242" fg:w="57434"/><text x="77.8613%" y="238.50">_call_impl (torch/nn/modu..</text></g><g><title>forward (models/yolo.py:266) (57,427 samples, 16.02%)</title><rect x="77.6133%" y="244" width="16.0184%" height="15" fill="rgb(219,207,3)" fg:x="278249" fg:w="57427"/><text x="77.8633%" y="254.50">forward (models/yolo.py:2..</text></g><g><title>forward (models/common.py:872) (57,629 samples, 16.07%)</title><rect x="77.5622%" y="148" width="16.0747%" height="15" fill="rgb(222,56,46)" fg:x="278066" fg:w="57629"/><text x="77.8122%" y="158.50">forward (models/common.py..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (57,550 samples, 16.05%)</title><rect x="77.5843%" y="164" width="16.0527%" height="15" fill="rgb(239,76,54)" fg:x="278145" fg:w="57550"/><text x="77.8343%" y="174.50">_wrapped_call_impl (torch..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (57,519 samples, 16.04%)</title><rect x="77.5929%" y="180" width="16.0440%" height="15" fill="rgb(231,124,27)" fg:x="278176" fg:w="57519"/><text x="77.8429%" y="190.50">_call_impl (torch/nn/modu..</text></g><g><title>non_max_suppression (utils/general.py:1056) (553 samples, 0.15%)</title><rect x="93.7931%" y="164" width="0.1543%" height="15" fill="rgb(249,195,6)" fg:x="336255" fg:w="553"/><text x="94.0431%" y="174.50"></text></g><g><title>non_max_suppression (utils/general.py:1075) (958 samples, 0.27%)</title><rect x="93.9970%" y="164" width="0.2672%" height="15" fill="rgb(237,174,47)" fg:x="336986" fg:w="958"/><text x="94.2470%" y="174.50"></text></g><g><title>non_max_suppression (utils/general.py:1084) (934 samples, 0.26%)</title><rect x="94.3187%" y="164" width="0.2605%" height="15" fill="rgb(206,201,31)" fg:x="338139" fg:w="934"/><text x="94.5687%" y="174.50"></text></g><g><title>non_max_suppression (utils/general.py:1098) (405 samples, 0.11%)</title><rect x="94.5814%" y="164" width="0.1130%" height="15" fill="rgb(231,57,52)" fg:x="339081" fg:w="405"/><text x="94.8314%" y="174.50"></text></g><g><title>non_max_suppression (utils/general.py:1103) (1,291 samples, 0.36%)</title><rect x="94.7717%" y="164" width="0.3601%" height="15" fill="rgb(248,177,22)" fg:x="339763" fg:w="1291"/><text x="95.0217%" y="174.50"></text></g><g><title>nms (torchvision/ops/boxes.py:41) (1,192 samples, 0.33%)</title><rect x="94.7993%" y="180" width="0.3325%" height="15" fill="rgb(215,211,37)" fg:x="339862" fg:w="1192"/><text x="95.0493%" y="190.50"></text></g><g><title>__call__ (torch/_ops.py:854) (1,169 samples, 0.33%)</title><rect x="94.8057%" y="196" width="0.3261%" height="15" fill="rgb(241,128,51)" fg:x="339885" fg:w="1169"/><text x="95.0557%" y="206.50"></text></g><g><title>forward (models/common.py:876) (5,443 samples, 1.52%)</title><rect x="93.6450%" y="148" width="1.5182%" height="15" fill="rgb(227,165,31)" fg:x="335724" fg:w="5443"/><text x="93.8950%" y="158.50"></text></g><g><title>scale_boxes (utils/general.py:961) (667 samples, 0.19%)</title><rect x="95.1906%" y="164" width="0.1860%" height="15" fill="rgb(228,167,24)" fg:x="341265" fg:w="667"/><text x="95.4406%" y="174.50"></text></g><g><title>scale_boxes (utils/general.py:962) (374 samples, 0.10%)</title><rect x="95.3767%" y="164" width="0.1043%" height="15" fill="rgb(228,143,12)" fg:x="341932" fg:w="374"/><text x="95.6267%" y="174.50"></text></g><g><title>forward (models/common.py:886) (1,634 samples, 0.46%)</title><rect x="95.1697%" y="148" width="0.4558%" height="15" fill="rgb(249,149,8)" fg:x="341190" fg:w="1634"/><text x="95.4197%" y="158.50"></text></g><g><title>scale_boxes (utils/general.py:964) (378 samples, 0.11%)</title><rect x="95.5200%" y="164" width="0.1054%" height="15" fill="rgb(243,35,44)" fg:x="342446" fg:w="378"/><text x="95.7700%" y="174.50"></text></g><g><title>__init__ (models/common.py:904) (852 samples, 0.24%)</title><rect x="95.7197%" y="164" width="0.2377%" height="15" fill="rgb(246,89,9)" fg:x="343162" fg:w="852"/><text x="95.9697%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (models/common.py:904) (847 samples, 0.24%)</title><rect x="95.7211%" y="180" width="0.2363%" height="15" fill="rgb(233,213,13)" fg:x="343167" fg:w="847"/><text x="95.9711%" y="190.50"></text></g><g><title>run_inference (Detection_Stage.py:23) (99,468 samples, 27.75%)</title><rect x="68.2609%" y="84" width="27.7451%" height="15" fill="rgb(233,141,41)" fg:x="244720" fg:w="99468"/><text x="68.5109%" y="94.50">run_inference (Detection_Stage.py:23)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1532) (99,322 samples, 27.70%)</title><rect x="68.3016%" y="100" width="27.7043%" height="15" fill="rgb(239,167,4)" fg:x="244866" fg:w="99322"/><text x="68.5516%" y="110.50">_wrapped_call_impl (torch/nn/modules/module...</text></g><g><title>_call_impl (torch/nn/modules/module.py:1541) (99,278 samples, 27.69%)</title><rect x="68.3139%" y="116" width="27.6921%" height="15" fill="rgb(209,217,16)" fg:x="244910" fg:w="99278"/><text x="68.5639%" y="126.50">_call_impl (torch/nn/modules/module.py:1541)</text></g><g><title>decorate_context (torch/utils/_contextlib.py:115) (99,134 samples, 27.65%)</title><rect x="68.3540%" y="132" width="27.6519%" height="15" fill="rgb(219,88,35)" fg:x="245054" fg:w="99134"/><text x="68.6040%" y="142.50">decorate_context (torch/utils/_contextlib.py..</text></g><g><title>forward (models/common.py:888) (1,364 samples, 0.38%)</title><rect x="95.6255%" y="148" width="0.3805%" height="15" fill="rgb(220,193,23)" fg:x="342824" fg:w="1364"/><text x="95.8755%" y="158.50"></text></g><g><title>pandas (models/common.py:1007) (1,580 samples, 0.44%)</title><rect x="96.0782%" y="100" width="0.4407%" height="15" fill="rgb(230,90,52)" fg:x="344447" fg:w="1580"/><text x="96.3282%" y="110.50"></text></g><g><title>&lt;listcomp&gt; (models/common.py:1007) (1,526 samples, 0.43%)</title><rect x="96.0932%" y="116" width="0.4257%" height="15" fill="rgb(252,106,19)" fg:x="344501" fg:w="1526"/><text x="96.3432%" y="126.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:654) (511 samples, 0.14%)</title><rect x="96.8745%" y="180" width="0.1425%" height="15" fill="rgb(206,74,20)" fg:x="347302" fg:w="511"/><text x="97.1245%" y="190.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:565) (906 samples, 0.25%)</title><rect x="96.8369%" y="164" width="0.2527%" height="15" fill="rgb(230,138,44)" fg:x="347167" fg:w="906"/><text x="97.0869%" y="174.50"></text></g><g><title>__init__ (pandas/core/frame.py:850) (1,577 samples, 0.44%)</title><rect x="96.7036%" y="132" width="0.4399%" height="15" fill="rgb(235,182,43)" fg:x="346689" fg:w="1577"/><text x="96.9536%" y="142.50"></text></g><g><title>ensure_index (pandas/core/indexes/base.py:7649) (1,512 samples, 0.42%)</title><rect x="96.7217%" y="148" width="0.4217%" height="15" fill="rgb(242,16,51)" fg:x="346754" fg:w="1512"/><text x="96.9717%" y="158.50"></text></g><g><title>convert (pandas/core/internals/construction.py:1030) (715 samples, 0.20%)</title><rect x="97.3074%" y="228" width="0.1994%" height="15" fill="rgb(248,9,4)" fg:x="348854" fg:w="715"/><text x="97.5574%" y="238.50"></text></g><g><title>_finalize_columns_and_data (pandas/core/internals/construction.py:945) (1,046 samples, 0.29%)</title><rect x="97.2634%" y="180" width="0.2918%" height="15" fill="rgb(210,31,22)" fg:x="348696" fg:w="1046"/><text x="97.5134%" y="190.50"></text></g><g><title>convert_object_array (pandas/core/internals/construction.py:1070) (997 samples, 0.28%)</title><rect x="97.2770%" y="196" width="0.2781%" height="15" fill="rgb(239,54,39)" fg:x="348745" fg:w="997"/><text x="97.5270%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/construction.py:1070) (988 samples, 0.28%)</title><rect x="97.2796%" y="212" width="0.2756%" height="15" fill="rgb(230,99,41)" fg:x="348754" fg:w="988"/><text x="97.5296%" y="222.50"></text></g><g><title>nested_data_to_arrays (pandas/core/internals/construction.py:520) (1,441 samples, 0.40%)</title><rect x="97.1538%" y="148" width="0.4019%" height="15" fill="rgb(253,106,12)" fg:x="348303" fg:w="1441"/><text x="97.4038%" y="158.50"></text></g><g><title>to_arrays (pandas/core/internals/construction.py:845) (1,309 samples, 0.37%)</title><rect x="97.1906%" y="164" width="0.3651%" height="15" fill="rgb(213,46,41)" fg:x="348435" fg:w="1309"/><text x="97.4406%" y="174.50"></text></g><g><title>__init__ (pandas/core/frame.py:851) (1,558 samples, 0.43%)</title><rect x="97.1434%" y="132" width="0.4346%" height="15" fill="rgb(215,133,35)" fg:x="348266" fg:w="1558"/><text x="97.3934%" y="142.50"></text></g><g><title>_homogenize (pandas/core/internals/construction.py:629) (528 samples, 0.15%)</title><rect x="97.6115%" y="164" width="0.1473%" height="15" fill="rgb(213,28,5)" fg:x="349944" fg:w="528"/><text x="97.8615%" y="174.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:119) (676 samples, 0.19%)</title><rect x="97.5864%" y="148" width="0.1886%" height="15" fill="rgb(215,77,49)" fg:x="349854" fg:w="676"/><text x="97.8364%" y="158.50"></text></g><g><title>_form_blocks (pandas/core/internals/managers.py:2212) (439 samples, 0.12%)</title><rect x="97.8578%" y="180" width="0.1225%" height="15" fill="rgb(248,100,22)" fg:x="350827" fg:w="439"/><text x="98.1078%" y="190.50"></text></g><g><title>_form_blocks (pandas/core/internals/managers.py:2215) (671 samples, 0.19%)</title><rect x="97.9811%" y="180" width="0.1872%" height="15" fill="rgb(208,67,9)" fg:x="351269" fg:w="671"/><text x="98.2311%" y="190.50"></text></g><g><title>create_block_manager_from_column_arrays (pandas/core/internals/managers.py:2139) (1,380 samples, 0.38%)</title><rect x="97.7844%" y="164" width="0.3849%" height="15" fill="rgb(219,133,21)" fg:x="350564" fg:w="1380"/><text x="98.0344%" y="174.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:152) (1,670 samples, 0.47%)</title><rect x="97.7816%" y="148" width="0.4658%" height="15" fill="rgb(246,46,29)" fg:x="350554" fg:w="1670"/><text x="98.0316%" y="158.50"></text></g><g><title>__init__ (pandas/core/frame.py:859) (2,403 samples, 0.67%)</title><rect x="97.5780%" y="132" width="0.6703%" height="15" fill="rgb(246,185,52)" fg:x="349824" fg:w="2403"/><text x="97.8280%" y="142.50"></text></g><g><title>pandas (models/common.py:1008) (6,524 samples, 1.82%)</title><rect x="96.5189%" y="100" width="1.8198%" height="15" fill="rgb(252,136,11)" fg:x="346027" fg:w="6524"/><text x="96.7689%" y="110.50">p..</text></g><g><title>&lt;listcomp&gt; (models/common.py:1008) (6,489 samples, 1.81%)</title><rect x="96.5287%" y="116" width="1.8100%" height="15" fill="rgb(219,138,53)" fg:x="346062" fg:w="6489"/><text x="96.7787%" y="126.50">&lt;..</text></g><g><title>run_inference (Detection_Stage.py:26) (8,364 samples, 2.33%)</title><rect x="96.0059%" y="84" width="2.3330%" height="15" fill="rgb(211,51,23)" fg:x="344188" fg:w="8364"/><text x="96.2559%" y="94.50">r..</text></g><g><title>iterrows (pandas/core/frame.py:1553) (386 samples, 0.11%)</title><rect x="98.3663%" y="100" width="0.1077%" height="15" fill="rgb(247,221,28)" fg:x="352650" fg:w="386"/><text x="98.6163%" y="110.50"></text></g><g><title>__init__ (pandas/core/series.py:584) (488 samples, 0.14%)</title><rect x="98.5705%" y="116" width="0.1361%" height="15" fill="rgb(251,222,45)" fg:x="353382" fg:w="488"/><text x="98.8205%" y="126.50"></text></g><g><title>iterrows (pandas/core/frame.py:1554) (1,619 samples, 0.45%)</title><rect x="98.4739%" y="100" width="0.4516%" height="15" fill="rgb(217,162,53)" fg:x="353036" fg:w="1619"/><text x="98.7239%" y="110.50"></text></g><g><title>run_inference (Detection_Stage.py:28) (2,108 samples, 0.59%)</title><rect x="98.3389%" y="84" width="0.5880%" height="15" fill="rgb(229,93,14)" fg:x="352552" fg:w="2108"/><text x="98.5889%" y="94.50"></text></g><g><title>run_inference (Detection_Stage.py:29) (482 samples, 0.13%)</title><rect x="98.9269%" y="84" width="0.1344%" height="15" fill="rgb(209,67,49)" fg:x="354660" fg:w="482"/><text x="99.1769%" y="94.50"></text></g><g><title>dump (json/__init__.py:179) (540 samples, 0.15%)</title><rect x="99.1306%" y="100" width="0.1506%" height="15" fill="rgb(213,87,29)" fg:x="355390" fg:w="540"/><text x="99.3806%" y="110.50"></text></g><g><title>_iterencode (json/encoder.py:430) (518 samples, 0.14%)</title><rect x="99.1367%" y="116" width="0.1445%" height="15" fill="rgb(205,151,52)" fg:x="355412" fg:w="518"/><text x="99.3867%" y="126.50"></text></g><g><title>_iterencode_list (json/encoder.py:326) (456 samples, 0.13%)</title><rect x="99.1540%" y="132" width="0.1272%" height="15" fill="rgb(253,215,39)" fg:x="355474" fg:w="456"/><text x="99.4040%" y="142.50"></text></g><g><title>&lt;module&gt; (main.py:56) (112,114 samples, 31.27%)</title><rect x="68.0383%" y="68" width="31.2725%" height="15" fill="rgb(221,220,41)" fg:x="243922" fg:w="112114"/><text x="68.2883%" y="78.50">&lt;module&gt; (main.py:56)</text></g><g><title>run_inference (Detection_Stage.py:42) (646 samples, 0.18%)</title><rect x="99.1306%" y="84" width="0.1802%" height="15" fill="rgb(218,133,21)" fg:x="355390" fg:w="646"/><text x="99.3806%" y="94.50"></text></g><g><title>do_one_step (torch/utils/data/_utils/pin_memory.py:37) (2,193 samples, 0.61%)</title><rect x="99.3152%" y="132" width="0.6117%" height="15" fill="rgb(221,193,43)" fg:x="356052" fg:w="2193"/><text x="99.5652%" y="142.50"></text></g><g><title>pin_memory (torch/utils/data/_utils/pin_memory.py:88) (2,193 samples, 0.61%)</title><rect x="99.3152%" y="148" width="0.6117%" height="15" fill="rgb(240,128,52)" fg:x="356052" fg:w="2193"/><text x="99.5652%" y="158.50"></text></g><g><title>pin_memory (torch/utils/data/_utils/pin_memory.py:58) (2,193 samples, 0.61%)</title><rect x="99.3152%" y="164" width="0.6117%" height="15" fill="rgb(253,114,12)" fg:x="356052" fg:w="2193"/><text x="99.5652%" y="174.50"></text></g><g><title>all (358,507 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="358507"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:1002) (2,471 samples, 0.69%)</title><rect x="99.3108%" y="68" width="0.6892%" height="15" fill="rgb(248,225,23)" fg:x="356036" fg:w="2471"/><text x="99.5608%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1045) (2,471 samples, 0.69%)</title><rect x="99.3108%" y="84" width="0.6892%" height="15" fill="rgb(250,108,0)" fg:x="356036" fg:w="2471"/><text x="99.5608%" y="94.50"></text></g><g><title>run (threading.py:982) (2,471 samples, 0.69%)</title><rect x="99.3108%" y="100" width="0.6892%" height="15" fill="rgb(228,208,7)" fg:x="356036" fg:w="2471"/><text x="99.5608%" y="110.50"></text></g><g><title>_pin_memory_loop (torch/utils/data/_utils/pin_memory.py:54) (2,469 samples, 0.69%)</title><rect x="99.3113%" y="116" width="0.6887%" height="15" fill="rgb(244,45,10)" fg:x="356038" fg:w="2469"/><text x="99.5613%" y="126.50"></text></g></svg></svg>